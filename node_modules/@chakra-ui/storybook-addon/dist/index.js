"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ADDON_ID: () => ADDON_ID,
  COLOR_MODE_TOOL_ID: () => COLOR_MODE_TOOL_ID,
  DIRECTION_TOOL_ID: () => DIRECTION_TOOL_ID,
  EVENTS: () => EVENTS,
  getThemingArgTypes: () => getThemingArgTypes
});
module.exports = __toCommonJS(src_exports);

// src/constants.ts
var ADDON_ID = "@chakra-ui/storybook-addon";
var COLOR_MODE_TOOL_ID = `${ADDON_ID}/color-mode-tool`;
var DIRECTION_TOOL_ID = `${ADDON_ID}/direction-tool`;
var EVENTS = {
  TOGGLE_COLOR_MODE: `${ADDON_ID}/toggleColorMode`,
  TOGGLE_DIRECTION: `${ADDON_ID}/toggleDirection`
};

// src/feature/arg-types.ts
function validateColorScheme(value) {
  const valueKeys = Object.keys(value || {});
  return [
    "50",
    "100",
    "200",
    "300",
    "400",
    "500",
    "600",
    "700",
    "800",
    "900"
  ].every((term) => valueKeys.includes(term));
}
function getThemingArgTypes(theme, componentName) {
  const component = theme.components[componentName];
  if (!component) {
    return void 0;
  }
  const argTypes = {};
  const variantOptions = Object.keys(component.variants || {});
  if (variantOptions.length) {
    argTypes.variant = {
      type: { name: "enum", value: variantOptions },
      defaultValue: component.defaultProps?.variant
    };
  }
  const sizeOptions = Object.keys(component.sizes || {});
  if (sizeOptions.length) {
    argTypes.size = {
      type: { name: "enum", value: sizeOptions },
      defaultValue: component.defaultProps?.size
    };
  }
  if (component.defaultProps?.["colorScheme"]) {
    const colorSchemes = Object.entries(theme.colors).filter(([, value]) => validateColorScheme(value)).map(([key]) => key);
    if (colorSchemes.length) {
      argTypes.colorScheme = {
        type: { name: "enum", value: colorSchemes },
        defaultValue: component.defaultProps?.colorScheme
      };
    }
  }
  return argTypes;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ADDON_ID,
  COLOR_MODE_TOOL_ID,
  DIRECTION_TOOL_ID,
  EVENTS,
  getThemingArgTypes
});
