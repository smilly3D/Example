"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/preset/decorators.ts
var decorators_exports = {};
__export(decorators_exports, {
  decorators: () => decorators
});
module.exports = __toCommonJS(decorators_exports);

// src/feature/decorator/ChakraProviderDecorator.tsx
var import_react4 = require("react");
var import_react5 = require("@chakra-ui/react");

// src/feature/color-mode/ColorModeSync.tsx
var import_react = require("react");
var import_react2 = require("@chakra-ui/react");
var import_addons = require("@storybook/addons");

// src/constants.ts
var ADDON_ID = "@chakra-ui/storybook-addon";
var COLOR_MODE_TOOL_ID = `${ADDON_ID}/color-mode-tool`;
var DIRECTION_TOOL_ID = `${ADDON_ID}/direction-tool`;
var EVENTS = {
  TOGGLE_COLOR_MODE: `${ADDON_ID}/toggleColorMode`,
  TOGGLE_DIRECTION: `${ADDON_ID}/toggleDirection`
};

// src/feature/color-mode/ColorModeSync.tsx
function ColorModeSync() {
  const { setColorMode } = (0, import_react2.useColorMode)();
  (0, import_react.useEffect)(() => {
    const channel = import_addons.addons.getChannel();
    const colorModeToolCallback = (value) => setColorMode(value);
    channel.on(EVENTS.TOGGLE_COLOR_MODE, colorModeToolCallback);
    return () => {
      channel.removeListener(EVENTS.TOGGLE_COLOR_MODE, colorModeToolCallback);
    };
  }, [setColorMode]);
  return null;
}

// src/feature/direction/useDirection.tsx
var import_react3 = require("react");
var import_addons2 = require("@storybook/addons");
var useDirection = (initialDirection = "ltr") => {
  const [direction, setDirection] = (0, import_react3.useState)(initialDirection.toLowerCase());
  (0, import_react3.useEffect)(() => {
    document.documentElement.dir = direction;
  }, [direction]);
  (0, import_react3.useEffect)(() => {
    const channel = import_addons2.addons.getChannel();
    const callback = (value) => setDirection(value);
    channel.on(EVENTS.TOGGLE_DIRECTION, callback);
    return () => {
      channel.removeListener(EVENTS.TOGGLE_DIRECTION, callback);
    };
  }, [setDirection]);
  return direction;
};

// src/feature/decorator/ChakraProviderDecorator.tsx
var import_jsx_runtime = require("react/jsx-runtime");
function ChakraProviderDecorator(Story, context) {
  const {
    parameters: { chakra: chakraParams },
    globals: { [DIRECTION_TOOL_ID]: globalDirection }
  } = context;
  const chakraTheme = chakraParams?.theme ? typeof chakraParams.theme === "function" ? chakraParams.theme(context) : chakraParams.theme : import_react5.theme;
  const direction = useDirection(globalDirection || chakraTheme?.direction);
  const themeWithDirectionOverride = (0, import_react4.useMemo)(
    () => (0, import_react5.extendTheme)({ direction }, chakraTheme),
    [chakraTheme, direction]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react5.ChakraProvider, { ...chakraParams, theme: themeWithDirectionOverride, children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ColorModeSync, {}),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Story, { ...context })
  ] });
}

// src/preset/decorators.ts
var decorators = [ChakraProviderDecorator];
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  decorators
});
