import {
  useDirection
} from "./chunk-2WYE4PWC.mjs";
import {
  ColorModeSync
} from "./chunk-2AKMANGE.mjs";
import {
  DIRECTION_TOOL_ID
} from "./chunk-QUP5TB6E.mjs";

// src/feature/decorator/ChakraProviderDecorator.tsx
import { useMemo } from "react";
import { ChakraProvider, extendTheme, theme } from "@chakra-ui/react";
import { jsx, jsxs } from "react/jsx-runtime";
function ChakraProviderDecorator(Story, context) {
  const {
    parameters: { chakra: chakraParams },
    globals: { [DIRECTION_TOOL_ID]: globalDirection }
  } = context;
  const chakraTheme = chakraParams?.theme ? typeof chakraParams.theme === "function" ? chakraParams.theme(context) : chakraParams.theme : theme;
  const direction = useDirection(globalDirection || chakraTheme?.direction);
  const themeWithDirectionOverride = useMemo(
    () => extendTheme({ direction }, chakraTheme),
    [chakraTheme, direction]
  );
  return /* @__PURE__ */ jsxs(ChakraProvider, { ...chakraParams, theme: themeWithDirectionOverride, children: [
    /* @__PURE__ */ jsx(ColorModeSync, {}),
    /* @__PURE__ */ jsx(Story, { ...context })
  ] });
}

export {
  ChakraProviderDecorator
};
